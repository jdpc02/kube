# -*- mode: ruby -*-
# vi: set ft=ruby :

kubes = [
    {
        :name => "kube-master",
        :role => "master",
        :itsip => "192.168.0.81"
    },
    {
        :name => "kube-node1",
        :role => "compute",
        :itsip => "192.168.0.84"
    },
    {
        :name => "kube-node2",
        :role => "compute",
        :itsip => "192.168.0.85"
    }
]

# Installing on all node types
$cfgcommon = <<-SCRIPT
  echo 'Starting common config'

  echo 'Create yum repo for kubernetes'
  cat > /etc/yum.repos.d/kubernetes.repo <<EOF
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kube*
EOF

  echo 'Create sysctl call for kubernetes'
  cat > /etc/sysctl.d/k8s.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

  echo 'Set SELinux in permissive mode (effectively disabling it)'
  sudo setenforce 0
  sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

  echo 'Disabling swap'
  sudo swapoff -a
  sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

  echo 'Updating the nodes'
  sudo yum upgrade -y
  sudo yum update -y

  echo 'Starting Docker Setup'
  sudo yum install -y yum-utils device-mapper-persistent-data lvm2

  echo 'Add docker repo'
  sudo yum-config-manager \
    --add-repo https://download.docker.com/linux/centos/docker-ce.repo

  echo 'Install DockerCE'
  sudo yum install -y docker-ce-18.09.8 docker-ce-cli-18.09.8 containerd.io

  echo 'Setup docker daemon'
  sudo mkdir /etc/docker
  cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF
  mkdir -p /etc/systemd/system/docker.service.d
  sudo systemctl daemon-reload
  sudo systemctl restart docker
  sudo systemctl enable docker.service
  usermod -aG docker vagrant
  echo 'Completed Docker Setup'

  echo 'Installing the necessary kubernetes packages'
  sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

  echo 'Finishing up'
  sudo sysctl --system
  sudo systemctl enable --now kubelet
  sudo systemctl start kubelet
  IPADDR=`ip addr sh eth1 | grep -E 'inet ' | awk '{print $2}' | cut -f1 -d/`
  echo This VM has IP address $IPADDR
  echo $IPADDR > /home/vagrant/IPADDR.txt

  sudo chmod 646 /etc/sysconfig/kubelet
  # sudo cat "KUBELET_EXTRA_ARGS=--node-ip=$(cat /home/vagrant/IPADDR.txt)" > /etc/default/kubelet
  sudo echo "KUBELET_EXTRA_ARGS=--node-ip=$(cat /home/vagrant/IPADDR.txt)" > /etc/sysconfig/kubelet
  sudo chmod 644 /etc/sysconfig/kubelet
  sudo systemctl daemon-reload
  sudo systemctl restart kubelet

  echo 'Finished common config'
SCRIPT

# Installing on all master nodes
$cfgmaster = <<-SCRIPT
  echo 'Starting master setup'

  echo 'Verify connectivity to gcr.io registries'
  kubeadm config images pull

  echo 'Initializing kubernetes'
  MASTERNODE=$(hostname -s)
  echo 'Initializing master node'
  sudo kubeadm init --pod-network-cidr=172.100.0.0/16 \
  --apiserver-advertise-address $(cat /home/vagrant/IPADDR.txt) \
  --apiserver-cert-extra-sans=$(cat /home/vagrant/IPADDR.txt) \
  --node-name $MASTERNODE | tee /home/vagrant/kubeinit.log

  echo 'Create script to auto-join compute nodes'
  tail -n 2 /home/vagrant/kubeinit.log > /home/vagrant/kubeadm_join_cmd.sh
  chmod +x /home/vagrant/kubeadm_join_cmd.sh

  echo 'Finishing up'
  sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
  sudo service sshd restart

  echo 'Setup vagrant for kubernetes access'
  sudo su - vagrant
  mkdir -p $HOME/.kube
  sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u vagrant):$(id -g vagrant) $HOME/.kube/config

  echo "Install Calico Pod Network Add-On"
  export KUBECONFIG=/etc/kubernetes/admin.conf
  kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml

  mkdir -p /home/vagrant/.kube
  sudo cp -f /etc/kubernetes/admin.conf /home/vagrant/.kube/config
  sudo chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config

  echo 'Finished master setup'
SCRIPT

# Installing on all compute nodes
$cfgcompute = <<-SCRIPT
  echo 'Starting setting up compute node'

  sudo yum install -y sshpass
  sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@192.168.0.81:/home/vagrant/kubeadm_join_cmd.sh /home/vagrant/.
  sudo sh /home/vagrant/kubeadm_join_cmd.sh

  echo 'Finished setting up compute node'
SCRIPT

Vagrant.configure(2) do |config|
  config.vm.box = "bento/centos-7"
  config.vm.boot_timeout = 300

  kubes.each do |dokube|
    config.vm.define dokube[:name] do |node|
      node.vm.hostname = dokube[:name]
      node.vm.network "public_network", ip: dokube[:itsip], bridge: "Intel(R) Dual Band Wireless-AC 3165"
      # node.vm.network "forwarded_port", guest:5050, host:9999, auto_correct: true
      # node.vm.usable_port_range = 9050..10050
      node.vm.provider "virtualbox" do |a|
        a.name = dokube[:name]
        a.customize ["modifyvm", :id, "--groups", "/localkube"]
        if dokube[:role] == "master"
          a.memory = 2048
          a.cpus = 2
        else
          a.memory = 2048
          a.cpus = 2
        end
        a.gui = false
      end
      node.vm.provision "shell", inline: $cfgcommon
      if dokube[:role] == "master"
        node.vm.provision "shell", inline: $cfgmaster
      else
        node.vm.provision "shell", inline: $cfgcompute
      end
    end
  end
end
